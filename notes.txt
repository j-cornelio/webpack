
https://webpack.js.org/guides/output-management/

--------------------------------------
HtmlWebpackPlugin 
by default will generate its own index.html file, even though we already have one in the dist/ folder. This means that it will replace our index.html file with a newly generated one. Let's see what happens when we do an npm run build:

--------------------------------------
Cleaning up the /dist folder 
/dist folder has become quite cluttered. clean the /dist folder before each build, so that only used files will be generated. Let's take care of that.

--------------------------------------
source maps
In order to make it easier to track down errors and warnings, JavaScript offers source maps, which maps your compiled code back to your original source code

--------------------------------------
webpack-dev-server 
provides you with a simple web server and the ability to use live reloading. Change your config file to tell the dev server where to look for files:

devServer: {
+     contentBase: './dist'
+   },

tells webpack-dev-server to serve the files from the dist directory on localhost:8080.

npm start

--------------------------------------
Hot Module Replacement (or HMR) 
is one of the most useful features offered by webpack. It allows all kinds of modules to be updated at runtime without the need for a full refresh. 

--------------------------------------
Tree shaking 
term commonly used in the JavaScript context for dead-code elimination.

> Add Utility

Set the mode configuration option to development to make sure that the bundle is not minified:

mode: "development"

> Mark the file as side-effect-free
A "side effect" is defined as code that performs a special behavior when imported, other than exposing one or more exports.

If your code did have some side effects though, an array can be provided

Note - that any imported file is subject to tree shaking. This means if you use something like css-loader in your project and import a CSS file, it needs to be added to the side effect list so it will not be unintentionally dropped in production mode


> Minify the Output
we'll use the -p (production) webpack compilation flag to enable UglifyJSPlugin.

mode: "production"

Notice anything different about dist/bundle.js? Clearly the whole bundle is now minified and mangled, but, if you look carefully, you won't see the square function included but will see a mangled version of the cube function (function r(e){return e*e*e}n.a=r). With minification and tree shaking our bundle is now a few bytes smaller! 

You can imagine your application as a tree. The source code and libraries you actually use represent the green, living leaves of the tree. Dead code represents the brown, dead leaves of the tree that are consumed by autumn. In order to get rid of the dead leaves, you have to shake the tree, causing them to fall.





--------------------------------------
Production

In development, we want strong source mapping and a localhost server with live reloading or hot module replacement. In production, our goals shift to a focus on minified bundles, lighter weight source maps, and optimized assets to improve load time. With this logical separation at hand, we typically recommend writing separate webpack configurations for each environment.

webpack.common.js - setup our entry and output configuration and we've included any plugins that are required for both environments. 

webpack.dev.js - set mode to development. Also, we've added the recommended devtool for that environment (strong source mapping), as well as our simple devServer configuration. 

webpack.prod.js - mode is set to production which loads UglifyJSPlugin which was first introduced by the tree shaking guide.

--------------------------------------


--------------------------------------


--------------------------------------
